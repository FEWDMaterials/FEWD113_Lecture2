{"home":{"content":"# Lecture 2/3: Intro to HTML and CSS\n---\n\nWelcome to Lecture 2! Here's a brief rundown of tonight's class.\n\n#### Learning Objectives\n---\n\n1. Understand how to use common HTML tags and their purpose in the larger document flow\n2. Understand how semantic HTML tags are used to markup a webpage.\n3. Brief introduction to CSS: the search engine of HTML\n\n#### [AutoSYNC](http://autosync.io/#/course/Taq/0)\n---\nAll my notes will be streamed here live. Keep it open on a tab!\n\n#### Rundown\n----\n#### [HTML Basics](#html-basics)\n#### [Semantic HTML](#semantic-html)\n#### [Intro to CSS](#intro-to-css)","idx":0},"title":{"content":"Lecture 2: Intro to HTML and CSS","idx":1},"desc":{"content":"A closer look @HTML and a quick introduction to CSS","idx":2},"html-basics":{"content":"# HTML Basics\n---\n\n**Learning objective**: Learn the basic structure of a simple HTML page.\n\n#### Background\n---\nHTML markup represents the **information architecture** of your page. All content of your webpage should exist within the confines of what we call **html tags**.\n\n**First**, we will discuss some basic tags together as a class.\n\n**Then**, you will build a simple resume webpage.\n\n#### Exercise\n---\nPlease create the resume website for your **favorite superhero**. Use **only** pure **HTML tags** and do not worry to much about the styles itself. \n\n#### Basic setup\n---\n\nHTML stands for **Hyper Text Markup Language**. It is a set of annotations that help parsers (ie: search engines) **understand** the nature of the information that is present on the page.\n\nThink of it like an outline that describes the high level importance of different elements of your webpage.\n\nYour typical HTML file will look like this:\n\n```html\n<!doctype html>\n<html>\n <head>\n <!--\n the HEAD section of html does not have any content\n that the user can see\n\n instead, we place things like:\n page title\n external css links\n SEO keywords\n here\n -->\n <meta charset=\"utf-8\">\n <title>My First Awesome Site</title>\n </head>\n <body>\n <!--\n\n the BODY section will contain all the tags\n that the user can _SEE_ and _INTERACT_ with\n -->\n </body>\n</html>\n```\n\n#### Key components\n---\n\n**`<!doctype html>`**\n\nThis tag tells the browser to read our HTML content as HTML5, the latest and greatest revision of the HTML spec. We MUST include it as the first thing on our .html files. I usually type it as all lower case, but it's common practice to also type as: <!DOCTYPE html>\n\n**`<html>`**\n\nThis is the root tag. Basically, all other tags in your html file must live inside this tag. Note how on the bottom of the code snippet, we have a \"\". This is called closing a tag and we must close all tags that we open (with the exception of a few). If we do not do this, our HTML markup becomes invalid.\n\n**`<head>`**\n\nThis section contains content that does not show the user things. Typically, we would expect to see things such as the page title, external links, and SEO tags here.\n\n**`<body>`**\n\nAll the magic happens here. All the tags the user interacts with should live in this tag.\n\n#### Commonly used HTML Tags\n---\n\n```html\n<!--\n the h1 - or heading one - will have the most important text on page \n by the old guard, we should really only have one h1 per page\n -->\n <h1>Hello, Wrold</h1>\n\n <h2>This is a h2</h2>\n\n <h3>This is an h3</h3>\n\n <h4>This is an h4</h4>\n\n <h5>This is an h5</h5>\n\n <h6>This is an h6</h6> \n\n <!--\n this is an inline element\n unline the block element, which is meant to provide structure\n the inline element is interpreted as content\n this means that will appear next to one another\n -->\n <strong>This is an inline element</strong>\n <strong>This is another inline element</strong>\n\n <!-- this is a block element so it will NOT be on the same line -->\n <h1>Will this be on the same line?</h1>\n\n <!-- \n\n differences between block elements and inline elements\n block: takes up entire width of page unless otherwise told \n (we don't know how yet)\n we can impose dimensions on block elements\n inline: meant to be content or text\n we cannot impose dimensions on inline elements \n\n -->\n\n <!-- how to add more spaces or line breaks?? -->\n <h1>THIS will have many &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spaces</h1>\n\n <h1>This is <br> Sparta</h1>\n\n <a href=\"http://www.google.com\">Hello, Wrold I'm a link, yo</a>\n\n <!--\n this is one mode\n <tagName attribute1=\"someValue\" attribute2=\"someOtherValue\"></tagName>\n\n this is a self closing tag\n <tagName attribute1=\"someValue\" attribute2=\"someOtherValue\">\n --> \n\n <!--\n convention: \n external links open up in new tab\n absolute URLs\n\n internal links open up in same tab\n relative URLs\n -->\n\n <a href=\"http://www.google.com\" target=\"_blank\">Hello, Wrold I'm ALSO a link, yo</a>\n\n <em>This is an em</em>\n\n <p>This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.</p>\n\n <img src=\"http://placekitten.com/g/200/300\">\n <span>This is a kitten. S/he is cute.</span>\n\n <ul>\n <li>This is a list item <div></div></li>\n <li>This is another list item</li>\n <li>This is a third list item</li>\n </ul>\n\n <ol>\n <li>This is an ordered list item</li>\n <li>This is another ordered list item</li>\n <li>This is a third ordered list item</li>\n </ol>\n\n <div></div>\n\n <span></span>\n```","idx":3},"semantic-html":{"content":"# Semantic HTML\n---\n\n**Learning objective**: Understand how semantic HTML tags are used to markup a webpage.\n\n#### Background\n---\n\nHTML5 introduces a plethora of new tags. These tags are mainly used to dictate structure and meaning to the **information** that is presented on our website.\n\n**First**, we will discuss some key vocabulary terms and how they fit around the context of some common HTML webpages on the internet. \n\n**Then**, you will attempt to incorporate this knowledge yourself on some of the pages that you have built.\n\n#### Exercises\n---\nHere are the main problems that we will be working towards in this section of the class.\n#### Problem 1:\n---\nTake the resume that you built and redefine the content using the **semantic** html elements we will be learning about today.\n\n#### Problem 2:\n---\nLet's use the **semantic** html tags we learned about to define the markup for the page.\n\n**[Starter code on GitHub](https://github.com/FEWDMaterials/WendyBite_BEM)**: download this repo then create a new repo on GitHub to for this project.\n\nAlso for now, don't worry about the styles that we will inevitably need to complete this assignment.\n<div>\n<img src=\"https://raw.githubusercontent.com/FEWDMaterials/WendyBite_BEM/master/assignmentMaterials/WendyBite_AboutMe.png\" style=\"width: 100%; height: auto;\">\n</div>\n<div>\n<img src=\"https://raw.githubusercontent.com/FEWDMaterials/WendyBite_BEM/master/assignmentMaterials/WendyBite_Resume.png\" style=\"width: 100%; height: auto;\">\n</div>\n\n<p></p><p></p>\n\n#### Properly marking up your page\n---\nDon't worry about what the `id` attributes mean for now.\n\n![site structure](http://i.stack.imgur.com/L4qMt.png)\n\n#### Sections VS Articles\n---\nUse **sections** when you are outlining **chapters in a book**. \n\n**EXAMPLE**: A dessert cookbook could have chapters on **cake** recipes vs **pie** recipes.\n\nUse **articles** when you are defining say **poems** in a volume.\n\n**EXAMPLE**: In our dessert cookbook, **each recipe** in the **cake** section would be an **article**.\n\nYou can nest **articles** into **sections** and **sections** into **articles**.\n\n**EXAMPLE**\n\nArticles can go inside section tags\n```html\n<section>\n    <article>\n      <!-- first blog post -->\n    </article>\n    \n    <!-- .... more articles here ... -->\n</section>\n```\n\nSections can also go inside article tags\n```html\n<article>\n  <section>\n     <!-- introduction -->\n  </section>\n\n  <section>\n     <!-- content -->\n  </section>\n\n  <section>\n     <!-- summary, etc -->\n  </section>\n</article>\n```\n\n**THIS STUFF IS PARTLY SUBJECTIVE; THERE REALLY IS NO ONE RIGHT ANSWER**. As long as we are consistent and don't violate the laws of HTML (ie: we don't put a **p** tag inside a **a** tag, or something like that). \n\n#### Headers, Footers, Nav, Main\n---\n\n* Use headers/foorters/navs as **often as you'd like** within each section/article/aside\n* Each sectioning element (section/article/aside) can have it's own `h1` tag (some validators say this is not recommended but this is still technically allowed)\n* I usually put `nav` tags inside the `header` or `footer` pages\n* **MAIN** can only be used once per page. Typically, it is used to define what the main content block of the page is. Don't have to use it though. \n* Essentially, **the blue in the previous image could be wrapped in a main tag**\n\n\n#### Semantic HTML5 Tags\n---\n\nHere are some of the main tags that are supported.\n\n**SECTION**: Represents a generic document or application section.\n\n**HEADER**: Represents a group of introductory or navigational aids..\n\n**FOOTER**: Represents a footer for a section and can contain information about the author, copyright information, et cetera.\n\n**NAV**: Represents a section of the document intended for navigation.\n\n**MAIN**: Defines the main content of a document.\n\n**ARTICLE**: Represents an independent piece of content of a document, such as a blog entry or newspaper article\n\n**ASIDE**: Represents a piece of content that is only slightly related to the rest of the page.\n\n#### More info on sections vs articles\n---\n\n**SECTION**: Used to either group different articles into different purposes or subjects, or to define the different sections of a single article.\n\n**ARTICLE**: `<article>` is related to `<section>`, but is distinctly different. Whereas `<section>` is for grouping distinct sections of content or functionality, `<article>` is for containing related individual standalone pieces of content, such as individual blog posts, videos, images or news items. \n\n\n\n\n","idx":4},"intro-to-css":{"content":"# Intro to CSS\n---\n\n**Learning objective**: understand that CSS is the **search engine** of HTML markup.\n\n#### Background\n---\nLet's talk about **CSS**, or **Cascading Style SHeets**, the language that allows us to define styles and adjustments to default content on our webpages.\n\n**First**, we will learn about absolute vs relative URLs.\n\n**Then**, we will discuss CSS and how it can be applied to an existing webpage that we have built.\n\n#### Exercises\n---\n\nHere are the main problems that we will aspire to be able to solve in this section.\n\n#### Problem 1\n---\n**[Consider this repo](https://github.com/FEWDMaterials/RelativePathsReview)**.\n\nYou are given several \"websites\". However they are set up in strange configurations! \n\n**For Each Folder**\n\n1. **WITHOUT** rearranging the files, link the proper css folders in the **`HEAD`** section\n2. If you do it right, hovering over the page in the browser will cause it to change colors\n\n#### Absolute VS Relative URLs\n---\nAbsolute/Relative URLs (or as they are sometimes called, **paths**).\n\n**Absolute URL**\n\nA URL that contains the **full path**. For example, **[https://validator.w3.org/nu/#textarea](https://validator.w3.org/nu/#textarea)** is an example of an absolute URL. \n\nContains both the **hostname** and the **full path** to file.\n\n**Relative URL**\n\nA URL that contains only a fragment of the full address. For example, **[/nu/textarea](/nu/textarea)**. **NOTE**: this won't actually work! However, the people in **https://validator.w3.org** would be able to use this correctly **because relative URLs use the hostname of the page they are on**.\n\n**When to use each type**\n\nIn general, if you are linking to an image or some other resource that lives on the internet, use **absolute paths**.\n\nWhen you are linking to something like **CSS stylesheets** or **javascript files** or **images that live on your servere** you should **definitely** use relative paths.\n\n#### Intro to CSS\n---\n\n**Basic Definition**\n\nMethod for searching your html tags efficiently and styling the results it finds.\n\n** Three ways to CSS **\n\n1. This way is evil, we won't even talk about it.\n2. This way is also not very good, we won't even talk about it.\n3. This way is ideal! let's discuss how to link in external files to your index.html...\n\n** Selectors **\n\n**SELECTOR**: a keyword used to query your html tags, classes, ids -- (the last two are html attributes)\n\n**RULES**: the style attributes you are going to set\n\n**[CHEAT LINK](http://fewdmaterials.github.io/Lecture2FEWD71/selectors_and_specificity.html)**\n\n#### Problems 2 - 5\n---\n#### Log in to [Samantha](http://samantha.fewd.us/#/) First!\n\nThen, given the following pages, please complete the task outlined.\n\n1. ##### [CSS Tag Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_Tag_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_Tag_Selectors)\n\n2. ##### [CSS Class Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_Class_Selectors_2) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_Class_Selectors_2)\n\n3. ##### [CSS ID Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_ID_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_ID_Selectors)\n\n4. ##### [Complex CSS Selectors](http://samantha.fewd.us/#fork/mottaquikarim/Complex_CSS_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/Complex_CSS_Selectors)\n\n\n","idx":5},"__list__":["home","title","desc","html-basics","semantic-html","intro-to-css"]}